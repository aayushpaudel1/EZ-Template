"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1604],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(r),m=o,v=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return r?n.createElement(v,l(l({ref:t},c),{},{components:r})):n.createElement(v,l({ref:t},c))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var u=2;u<a;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5162:function(e,t,r){r.d(t,{Z:function(){return l}});var n=r(7294),o=r(6010),a="tabItem_Ymn6";function l(e){var t=e.children,r=e.hidden,l=e.className;return n.createElement("div",{role:"tabpanel",className:(0,o.Z)(a,l),hidden:r},t)}},5488:function(e,t,r){r.d(t,{Z:function(){return m}});var n=r(7462),o=r(7294),a=r(6010),l=r(2389),i=r(7392),s=r(7094),u=r(2466),c="tabList__CuJ",p="tabItem_LNqP";function d(e){var t,r,l=e.lazy,d=e.block,m=e.defaultValue,v=e.values,f=e.groupId,h=e.className,b=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=v?v:b.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),y=(0,i.l)(g,(function(e,t){return e.value===t.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===m?m:null!=(t=null!=m?m:null==(r=b.find((function(e){return e.props.default})))?void 0:r.props.value)?t:b[0].props.value;if(null!==k&&!g.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=(0,s.U)(),T=w.tabGroupChoices,E=w.setTabGroupChoices,x=(0,o.useState)(k),_=x[0],D=x[1],I=[],P=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var O=T[f];null!=O&&O!==_&&g.some((function(e){return e.value===O}))&&D(O)}var C=function(e){var t=e.currentTarget,r=I.indexOf(t),n=g[r].value;n!==_&&(P(t),D(n),null!=f&&E(f,String(n)))},N=function(e){var t,r=null;switch(e.key){case"ArrowRight":var n,o=I.indexOf(e.currentTarget)+1;r=null!=(n=I[o])?n:I[0];break;case"ArrowLeft":var a,l=I.indexOf(e.currentTarget)-1;r=null!=(a=I[l])?a:I[I.length-1]}null==(t=r)||t.focus()};return o.createElement("div",{className:(0,a.Z)("tabs-container",c)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":d},h)},g.map((function(e){var t=e.value,r=e.label,l=e.attributes;return o.createElement("li",(0,n.Z)({role:"tab",tabIndex:_===t?0:-1,"aria-selected":_===t,key:t,ref:function(e){return I.push(e)},onKeyDown:N,onFocus:C,onClick:C},l,{className:(0,a.Z)("tabs__item",p,null==l?void 0:l.className,{"tabs__item--active":_===t})}),null!=r?r:t)}))),l?(0,o.cloneElement)(b.filter((function(e){return e.props.value===_}))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},b.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==_})}))))}function m(e){var t=(0,l.Z)();return o.createElement(d,(0,n.Z)({key:String(t)},e))}},5558:function(e,t,r){r.r(t),r.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return m}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),l=r(5488),i=r(5162),s=["components"],u={layout:"default",title:"Drive Constructors",parent:"Docs",nav_order:1},c=void 0,p={unversionedId:"Docs/constructor",id:"Docs/constructor",title:"Drive Constructors",description:"Note: smart encoders are not supported as of 2.0.0",source:"@site/docs/Docs/constructor.md",sourceDirName:"Docs",slug:"/Docs/constructor",permalink:"/EZ-Template/Docs/constructor",draft:!1,tags:[],version:"current",frontMatter:{layout:"default",title:"Drive Constructors",parent:"Docs",nav_order:1},sidebar:"tutorialSidebar",previous:{title:"Autonomous Selector",permalink:"/EZ-Template/Docs/auton_selector"},next:{title:"PID",permalink:"/EZ-Template/Docs/pid"}},d={},m=[{value:"Integrated Encoders",id:"integrated-encoders",level:2},{value:"ADI Encoders in Brain",id:"adi-encoders-in-brain",level:2},{value:"ADI Encoders in Expander",id:"adi-encoders-in-expander",level:2},{value:"Rotation Sensor",id:"rotation-sensor",level:2}],v={toc:m};function f(e){var t=e.components,r=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,n.Z)({},v,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Note: smart encoders are not supported as of 2.0.0")),(0,a.kt)("h2",{id:"integrated-encoders"},"Integrated Encoders"),(0,a.kt)(l.Z,{groupId:"ex1",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'Drive chassis (\n  // Left Chassis Ports (negative port will reverse it!)\n  //   the first port is the sensored port (when trackers are not used!)\n  {1, -2, 3}\n\n  // Right Chassis Ports (negative port will reverse it!)\n  //   the first port is the sensored port (when trackers are not used!)\n  ,{-4, 5, -6}\n\n  // IMU Port\n  ,7\n\n  // Wheel Diameter (Remember, 4" wheels are actually 4.125!)\n  ,4.125\n\n  // Cartridge RPM\n  ,600\n\n  // External Gear Ratio (MUST BE DECIMAL)\n  // eg. if your drive is 84:36 where the 36t is powered, your RATIO would be 2.333.\n  // eg. if your drive is 36:60 where the 60t is powered, your RATIO would be 0.6.\n  ,2.333\n);\n'))),(0,a.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"Drive(std::vector<int> left_motor_ports, std::vector<int> right_motor_ports, int imu_port, \ndouble wheel_diameter, double ticks, double ratio);\n")))),(0,a.kt)("h2",{id:"adi-encoders-in-brain"},"ADI Encoders in Brain"),(0,a.kt)("p",null,"Currently only supports parallel trackers!  "),(0,a.kt)(l.Z,{groupId:"ex2",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'// Chassis constructor\nDrive chassis (\n  // Left Chassis Ports (negative port will reverse it!)\n  {1, -2, 3}\n\n  // Right Chassis Ports (negative port will reverse it!)\n  ,{-4, 5, -6}\n\n  // IMU Port\n  ,7\n\n  // Tracking Wheel Diameter (Remember, 4" wheels are actually 4.125!)\n  ,4.125\n\n  // Ticks per Rotation of Encoder\n  ,360\n\n  // External Gear Ratio of Tracking Wheel (MUST BE DECIMAL)\n  // eg. if your drive is 84:36 where the 36t is sensored, your RATIO would be 2.333.\n  // eg. if your drive is 36:60 where the 60t is sensored, your RATIO would be 0.6.\n  ,1\n\n  // Left Tracking Wheel Ports (negative port will reverse it!)\n  ,{1, 2}\n\n  // Right Tracking Wheel Ports (negative port will reverse it!)\n  ,{-3, -4}\n);\n'))),(0,a.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"Drive(std::vector<int> left_motor_ports, std::vector<int> right_motor_ports, int imu_port, \ndouble wheel_diameter, double ticks, double ratio, std::vector<int> left_tracker_ports,\nstd::vector<int> right_tracker_ports);\n")))),(0,a.kt)("h2",{id:"adi-encoders-in-expander"},"ADI Encoders in Expander"),(0,a.kt)("p",null,"Currently only supports parallel trackers!  "),(0,a.kt)(l.Z,{groupId:"ex3",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'// Chassis constructor\nDrive chassis (\n  // Left Chassis Ports (negative port will reverse it!)\n  {1, -2, 3}\n\n  // Right Chassis Ports (negative port will reverse it!)\n  ,{-4, 5, -6}\n\n  // IMU Port\n  ,7\n\n  // Tracking Wheel Diameter (Remember, 4" wheels are actually 4.125!)\n  ,4.125\n\n  // Ticks per Rotation of Encoder\n  ,360\n\n  // External Gear Ratio of Tracking Wheel(MUST BE DECIMAL)\n  // eg. if your drive is 84:36 where the 36t is sensored, your RATIO would be 2.333.\n  // eg. if your drive is 36:60 where the 60t is sensored, your RATIO would be 0.6.\n  ,1\n\n  // Left Tracking Wheel Ports (negative port will reverse it!)\n  ,{1, 2}\n\n  // Right Tracking Wheel Ports (negative port will reverse it!)\n  ,{-3, -4}\n  \n  // 3 Wire Port Expander Smart Port\n  ,9\n);\n'))),(0,a.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"Drive(std::vector<int> left_motor_ports, std::vector<int> right_motor_ports, int imu_port, \ndouble wheel_diameter, double ticks, double ratio, std::vector<int> left_tracker_ports, \nstd::vector<int> right_tracker_ports, int expander_smart_port);\n")))),(0,a.kt)("h2",{id:"rotation-sensor"},"Rotation Sensor"),(0,a.kt)("p",null,"Currently only supports parallel trackers!  "),(0,a.kt)(l.Z,{groupId:"ex4",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'// Chassis constructor\nDrive chassis (\n  // Left Chassis Ports (negative port will reverse it!)\n  //   the first port is the sensored port (when trackers are not used!)\n  {1, -2, 3}\n\n  // Right Chassis Ports (negative port will reverse it!)\n  //   the first port is the sensored port (when trackers are not used!)\n  ,{-4, 5, -6}\n\n  // IMU Port\n  ,7\n\n  // Wheel Diameter (Remember, 4" wheels are actually 4.125!)\n  //    (or tracking wheel diameter)\n  ,4.125\n\n  // External Gear Ratio (MUST BE DECIMAL)\n  //    (or gear ratio of tracking wheel)\n  // eg. if your drive is 84:36 where the 36t is powered, your RATIO would be 2.333.\n  // eg. if your drive is 36:60 where the 60t is powered, your RATIO would be 0.6.\n  ,1\n\n  // Left Rotation Port (negative port will reverse it!)\n  ,8\n\n  // Right Rotation Port (negative port will reverse it!)\n  ,-9\n);\n'))),(0,a.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"Drive(std::vector<int> left_motor_ports, std::vector<int> right_motor_ports, int imu_port, \ndouble wheel_diameter, double ratio, int left_rotation_port, int right_rotation_port);\n")))))}f.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1934],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:function(e,t,n){n.d(t,{Z:function(){return i}});var r=n(7294),a=n(6010),o="tabItem_Ymn6";function i(e){var t=e.children,n=e.hidden,i=e.className;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,i),hidden:n},t)}},5488:function(e,t,n){n.d(t,{Z:function(){return m}});var r=n(7462),a=n(7294),o=n(6010),i=n(2389),l=n(7392),s=n(7094),p=n(2466),c="tabList__CuJ",u="tabItem_LNqP";function d(e){var t,n,i=e.lazy,d=e.block,m=e.defaultValue,h=e.values,k=e.groupId,f=e.className,v=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),_=null!=h?h:v.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),g=(0,l.l)(_,(function(e,t){return e.value===t.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===m?m:null!=(t=null!=m?m:null==(n=v.find((function(e){return e.props.default})))?void 0:n.props.value)?t:v[0].props.value;if(null!==b&&!_.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+_.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,s.U)(),T=y.tabGroupChoices,w=y.setTabGroupChoices,x=(0,a.useState)(b),O=x[0],E=x[1],N=[],C=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=k){var P=T[k];null!=P&&P!==O&&_.some((function(e){return e.value===P}))&&E(P)}var D=function(e){var t=e.currentTarget,n=N.indexOf(t),r=_[n].value;r!==O&&(C(t),E(r),null!=k&&w(k,String(r)))},I=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r,a=N.indexOf(e.currentTarget)+1;n=null!=(r=N[a])?r:N[0];break;case"ArrowLeft":var o,i=N.indexOf(e.currentTarget)-1;n=null!=(o=N[i])?o:N[N.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":d},f)},_.map((function(e){var t=e.value,n=e.label,i=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:function(e){return N.push(e)},onKeyDown:I,onFocus:D,onClick:D},i,{className:(0,o.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":O===t})}),null!=n?n:t)}))),i?(0,a.cloneElement)(v.filter((function(e){return e.props.value===O}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},v.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==O})}))))}function m(e){var t=(0,i.Z)();return a.createElement(d,(0,r.Z)({key:String(t)},e))}},3384:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return k},frontMatter:function(){return p},metadata:function(){return u},toc:function(){return m}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=n(5488),l=n(5162),s=["components"],p={layout:"default",title:"PTO",parent:"Docs",nav_order:7},c=void 0,u={unversionedId:"Docs/pto",id:"Docs/pto",title:"PTO",description:"Assumed Constructor",source:"@site/docs/Docs/pto.md",sourceDirName:"Docs",slug:"/Docs/pto",permalink:"/EZ-Template/Docs/pto",draft:!1,tags:[],version:"current",frontMatter:{layout:"default",title:"PTO",parent:"Docs",nav_order:7},sidebar:"tutorialSidebar",previous:{title:"PID",permalink:"/EZ-Template/Docs/pid"},next:{title:"Drive and Telemetry",permalink:"/EZ-Template/Docs/set_and_get_drive"}},d={},m=[{value:"Assumed Constructor",id:"assumed-constructor",level:2},{value:"pto_check()",id:"pto_check",level:2},{value:"pto_add()",id:"pto_add",level:2},{value:"pto_remove()",id:"pto_remove",level:2},{value:"pto_toggle()",id:"pto_toggle",level:2}],h={toc:m};function k(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"assumed-constructor"},"Assumed Constructor"),(0,o.kt)("p",null,"All code below assumes this constructor is used.  As long as the name of the constructor is ",(0,o.kt)("inlineCode",{parentName:"p"},"chassis"),", any of the constructors can be used. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'// Chassis constructor\nDrive chassis (\n  // Left Chassis Ports (negative port will reverse it!)\n  //   the first port is the sensored port (when trackers are not used!)\n  {1, -2, 3}\n\n  // Right Chassis Ports (negative port will reverse it!)\n  //   the first port is the sensored port (when trackers are not used!)\n  ,{-4, 5, -6}\n\n  // IMU Port\n  ,7\n\n  // Wheel Diameter (Remember, 4" wheels are actually 4.125!)\n  //    (or tracking wheel diameter)\n  ,4.125\n\n  // Cartridge RPM\n  //   (or tick per rotation if using tracking wheels)\n  ,600\n\n  // External Gear Ratio (MUST BE DECIMAL)\n  //    (or gear ratio of tracking wheel)\n  // eg. if your drive is 84:36 where the 36t is powered, your RATIO would be 2.333.\n  // eg. if your drive is 36:60 where the 60t is powered, your RATIO would be 0.6.\n  ,2.333\n\n  // Uncomment if using tracking wheels\n  /*\n  // Left Tracking Wheel Ports (negative port will reverse it!)\n  ,{1, 2}\n\n  // Right Tracking Wheel Ports (negative port will reverse it!)\n  ,{-3, -4}\n  */\n\n  // Uncomment if tracking wheels are plugged into a 3 wire expander\n  // 3 Wire Port Expander Smart Port\n  // ,9\n);\n\n')),(0,o.kt)("h2",{id:"pto_check"},"pto_check()"),(0,o.kt)("p",null,"Checks if the port is in the pto_list.     "),(0,o.kt)(i.Z,{groupId:"ex1",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"example",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'pros::Motor& intake_l = chassis.left_motors[1];\npros::Motor& intake_r = chassis.right_motors[1];\n\nvoid initialize() {\n  printf("Check: %i %i\\n", chassis.pto_check(intake_l), chassis.pto_check(intake_r))); // This prints 0 0\n  chassis.pto_add({intake_l, intake_r});\n  printf("Check: %i %i\\n", chassis.pto_check(intake_l), chassis.pto_check(intake_r))); // This prints 1 1\n}\n'))),(0,o.kt)(l.Z,{value:"proto",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"bool pto_check(pros::Motor check_if_pto);\n")))),(0,o.kt)("h2",{id:"pto_add"},"pto_add()"),(0,o.kt)("p",null,"Adds motors to the pto_list.  You cannot add the first index because it's used for autonomous.     "),(0,o.kt)(i.Z,{groupId:"ex2",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"example",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'pros::Motor& intake_l = chassis.left_motors[1];\npros::Motor& intake_r = chassis.right_motors[1];\n\nvoid initialize() {\n  printf("Check: %i %i\\n", chassis.pto_check(intake_l), chassis.pto_check(intake_r))); // This prints 0 0\n  chassis.pto_add({intake_l, intake_r});\n  printf("Check: %i %i\\n", chassis.pto_check(intake_l), chassis.pto_check(intake_r))); // This prints 1 1\n}\n'))),(0,o.kt)(l.Z,{value:"proto",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"void pto_add(std::vector<pros::Motor> pto_list);\n")))),(0,o.kt)("h2",{id:"pto_remove"},"pto_remove()"),(0,o.kt)("p",null,"Removes motors from the pto_list.      "),(0,o.kt)(i.Z,{groupId:"ex3",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"example",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'pros::Motor& intake_l = chassis.left_motors[1];\npros::Motor& intake_r = chassis.right_motors[1];\n\nvoid initialize() {\n  printf("Check: %i %i\\n", chassis.pto_check(intake_l), chassis.pto_check(intake_r))); // This prints 0 0\n  chassis.pto_add({intake_l, intake_r});\n  printf("Check: %i %i\\n", chassis.pto_check(intake_l), chassis.pto_check(intake_r))); // This prints 1 1\n  chassis.pto_remove({intake_l, intake_r});\n  printf("Check: %i %i\\n", chassis.pto_check(intake_l), chassis.pto_check(intake_r))); // This prints 0 0\n}\n'))),(0,o.kt)(l.Z,{value:"proto",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"void pto_remove(std::vector<pros::Motor> pto_list);\n")))),(0,o.kt)("h2",{id:"pto_toggle"},"pto_toggle()"),(0,o.kt)("p",null,"Runs ",(0,o.kt)("inlineCode",{parentName:"p"},"pto_add")," if ",(0,o.kt)("inlineCode",{parentName:"p"},"toggle")," is true, and ",(0,o.kt)("inlineCode",{parentName:"p"},"pto_remove")," if ",(0,o.kt)("inlineCode",{parentName:"p"},"toggle")," is false.       "),(0,o.kt)(i.Z,{groupId:"ex4",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"example",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"pros::Motor& intake_l = chassis.left_motors[1];\npros::Motor& intake_r = chassis.right_motors[1];\npros::ADIDigitalOut pto_intake_piston('A');\nbool pto_intake_enabled = false;\n\nvoid pto_intake(bool toggle) {\n  pto_intake_enabled = toggle;\n  chassis.pto_toggle({intake_l, intake_r}, toggle);\n  pto_intake_piston.set_value(toggle);\n  if (toggle) {\n    intake_l.set_brake_mode(pros::E_MOTOR_BRAKE_COAST);\n    intake_r.set_brake_mode(pros::E_MOTOR_BRAKE_COAST);\n  }\n}\n"))),(0,o.kt)(l.Z,{value:"proto",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"void pto_toggle(std::vector<pros::Motor> pto_list, bool toggle);\n")))))}k.isMDXComponent=!0}}]);
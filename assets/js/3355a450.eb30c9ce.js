"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5354],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var u=r.createContext({}),c=function(t){var e=r.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},p=function(t){var e=c(t.components);return r.createElement(u.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,u=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),f=c(n),d=o,m=f["".concat(u,".").concat(d)]||f[d]||s[d]||i;return n?r.createElement(m,a(a({ref:e},p),{},{components:n})):r.createElement(m,a({ref:e},p))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=n.length,a=new Array(i);a[0]=f;var l={};for(var u in e)hasOwnProperty.call(e,u)&&(l[u]=e[u]);l.originalType=t,l.mdxType="string"==typeof t?t:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},1494:function(t,e,n){n.r(e),n.d(e,{assets:function(){return p},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return s}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],l={title:"PID Tutorial",description:"How to add a feedback loop to motors and increase their accuracy."},u="**PID Tutorial**",c={unversionedId:"Tutorials/pid",id:"Tutorials/pid",title:"PID Tutorial",description:"How to add a feedback loop to motors and increase their accuracy.",source:"@site/docs/Tutorials/pid.md",sourceDirName:"Tutorials",slug:"/Tutorials/pid",permalink:"/Tutorials/pid",draft:!1,tags:[],version:"current",frontMatter:{title:"PID Tutorial",description:"How to add a feedback loop to motors and increase their accuracy."},sidebar:"tutorialSidebar",previous:{title:"Joystick Curves",permalink:"/Tutorials/joystick_curve"},next:{title:"PTO Tutorial",permalink:"/Tutorials/pto_tutorial"}},p={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Example",id:"example",level:2}],f={toc:s};function d(t){var e=t.components,n=(0,o.Z)(t,a);return(0,i.kt)("wrapper",(0,r.Z)({},f,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pid-tutorial"},(0,i.kt)("strong",{parentName:"h1"},"PID Tutorial")),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"PID (proportion, integral, derivative) is a feedback controlled used to move something to a position.  The controller slows down as it approaches its target.  It is a relatively simply controller and can be very consistent with tuning.  "),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'pros::Motor l_lift(17);\npros::Motor r_lift(18);\nvoid set_lift(int input) {\n  l_lift = input;\n  r_lift = input;\n}\nPID liftPID{0.45, 0, 0, 0, "Lift"};\n\n\nvoid lift_auto(double target) {\n  liftPID.set_target(target);\n  ez::exit_output exit = ez::RUNNING;\n  while (liftPID.exit_condition({l_lift, r_lift}, true) == ez::RUNNING) {\n    double output = liftPID.compute(l_lift.get_position());\n    set_lift(output);\n    pros::delay(ez::util::DELAY_TIME);\n  }\n  set_lift(0);\n}\n\nvoid initialize() {\n  liftPID.set_exit_condition(80, 50, 300, 150, 500, 500);\n}\n\nvoid autonomous() {\n  lift_auto(1000);\n}\n\nvoid opcontrol() {\n  while (true) {\n    if (master.get_digital(DIGITAL_L1)) {\n      liftPID.set_target(500);\n    }\n    else if (master.get_digital(DIGITAL_L2)) {\n      liftPID.set_target(0);\n    }\n    set_lift(liftPID.compute(l_lift.get_position()));\n\n    pros::delay(ez::util::DELAY_TIME);\n  }\n}\n')))}d.isMDXComponent=!0}}]);
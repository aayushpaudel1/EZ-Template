"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[386],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=u(n),d=o,f=c["".concat(p,".").concat(d)]||c[d]||m[d]||l;return n?a.createElement(f,r(r({ref:t},s),{},{components:n})):a.createElement(f,r({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var u=2;u<l;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5162:function(e,t,n){n.d(t,{Z:function(){return r}});var a=n(7294),o=n(6010),l="tabItem_Ymn6";function r(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(l,r),hidden:n},t)}},5488:function(e,t,n){n.d(t,{Z:function(){return d}});var a=n(7462),o=n(7294),l=n(6010),r=n(2389),i=n(7392),p=n(7094),u=n(2466),s="tabList__CuJ",m="tabItem_LNqP";function c(e){var t,n,r=e.lazy,c=e.block,d=e.defaultValue,f=e.values,_=e.groupId,v=e.className,b=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=f?f:b.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),g=(0,i.l)(k,(function(e,t){return e.value===t.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var I=null===d?d:null!=(t=null!=d?d:null==(n=b.find((function(e){return e.props.default})))?void 0:n.props.value)?t:b[0].props.value;if(null!==I&&!k.some((function(e){return e.value===I})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+I+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var x=(0,p.U)(),y=x.tabGroupChoices,N=x.setTabGroupChoices,D=(0,o.useState)(I),T=D[0],h=D[1],P=[],E=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=_){var C=y[_];null!=C&&C!==T&&k.some((function(e){return e.value===C}))&&h(C)}var Z=function(e){var t=e.currentTarget,n=P.indexOf(t),a=k[n].value;a!==T&&(E(t),h(a),null!=_&&N(_,String(a)))},w=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,o=P.indexOf(e.currentTarget)+1;n=null!=(a=P[o])?a:P[0];break;case"ArrowLeft":var l,r=P.indexOf(e.currentTarget)-1;n=null!=(l=P[r])?l:P[P.length-1]}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,l.Z)("tabs-container",s)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":c},v)},k.map((function(e){var t=e.value,n=e.label,r=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:function(e){return P.push(e)},onKeyDown:w,onFocus:Z,onClick:Z},r,{className:(0,l.Z)("tabs__item",m,null==r?void 0:r.className,{"tabs__item--active":T===t})}),null!=n?n:t)}))),r?(0,o.cloneElement)(b.filter((function(e){return e.props.value===T}))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},b.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function d(e){var t=(0,r.Z)();return o.createElement(c,(0,a.Z)({key:String(t)},e))}},2344:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return _},frontMatter:function(){return u},metadata:function(){return m},toc:function(){return d}});var a=n(7462),o=n(3366),l=(n(7294),n(3905)),r=n(5488),i=n(5162),p=["components"],u={layout:"default",title:"PID",parent:"Docs",nav_order:6},s="Constructors",m={unversionedId:"Docs/pid",id:"Docs/pid",title:"PID",description:"PID()",source:"@site/docs/Docs/pid.md",sourceDirName:"Docs",slug:"/Docs/pid",permalink:"/EZ-Template/Docs/pid",draft:!1,tags:[],version:"current",frontMatter:{layout:"default",title:"PID",parent:"Docs",nav_order:6},sidebar:"tutorialSidebar",previous:{title:"Drive Constructors",permalink:"/EZ-Template/Docs/constructor"},next:{title:"PTO",permalink:"/EZ-Template/Docs/pto"}},c={},d=[{value:"PID()",id:"pid",level:2},{value:"PID()",id:"pid-1",level:2},{value:"set_constants()",id:"set_constants",level:2},{value:"set_target()",id:"set_target",level:2},{value:"set_exit_condition()",id:"set_exit_condition",level:2},{value:"set_name()",id:"set_name",level:2},{value:"compute()",id:"compute",level:2},{value:"No Motor",id:"no-motor",level:2},{value:"One Motor",id:"one-motor",level:2},{value:"Multiple Motors",id:"multiple-motors",level:2}],f={toc:d};function _(e){var t=e.components,n=(0,o.Z)(e,p);return(0,l.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"constructors"},"Constructors"),(0,l.kt)("h2",{id:"pid"},"PID()"),(0,l.kt)("p",null,"Creates a blank PID object.  "),(0,l.kt)(r.Z,{groupId:"ex1",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"PID liftPID;\n"))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"PID();\n")))),(0,l.kt)("h2",{id:"pid-1"},"PID()"),(0,l.kt)("p",null,"Creates a PID object with constants.  Everything past kP has a default starting value, so you can juts put kP.  "),(0,l.kt)(r.Z,{groupId:"ex2",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'PID liftPID{1, 0.003, 4, 100, "Lift"};\n'))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'PID(double p, double i = 0, double d = 0, double start_i = 0, std::string name = "");\n')))),(0,l.kt)("h1",{id:"functions"},"Functions"),(0,l.kt)("h2",{id:"set_constants"},"set_constants()"),(0,l.kt)("p",null,"Sets PID constants.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"p")," kP\n",(0,l.kt)("inlineCode",{parentName:"p"},"i")," kI\n",(0,l.kt)("inlineCode",{parentName:"p"},"d")," kD\n",(0,l.kt)("inlineCode",{parentName:"p"},"p_start_i")," i will start when error is within this    "),(0,l.kt)(r.Z,{groupId:"ex3",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"PID liftPID;\nvoid initialize() {\n  liftPID.set_constants(1, 0, 4);\n}\n"))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void set_constants(double p, double i = 0, double d = 0, double p_start_i = 0);\n")))),(0,l.kt)("h2",{id:"set_target"},"set_target()"),(0,l.kt)("p",null,"Sets PID target.   "),(0,l.kt)(r.Z,{groupId:"ex4",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'PID liftPID{1, 0.003, 4, 100, "Lift"};  \npros::Motor lift_motor(1);\nvoid opcontrol() {\n  while (true) {\n    if (master.get_digital(DIGITAL_L1)) {\n      liftPID.set_target(500);\n    }\n    else if (master.get_digital(DIGITAL_L2)) {\n      liftPID.set_target(0);\n    }\n    lift_motor = liftPID.compute(lift_motor.get_position());\n\n    pros::delay(ez::util::DELAY_TIME);\n  }\n}\n'))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void set_target(double input);\n")))),(0,l.kt)("h2",{id:"set_exit_condition"},"set_exit_condition()"),(0,l.kt)("p",null,"Sets the exit condition constants.  To disable one of the conditions, set the constants relating to it to ",(0,l.kt)("inlineCode",{parentName:"p"},"0"),".",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"p_small_exit_time")," time, in ms, before exiting ",(0,l.kt)("inlineCode",{parentName:"p"},"p_small_error"),(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"p_small_error")," small error threshold",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"p_big_exit_time")," time, in ms, before exiting ",(0,l.kt)("inlineCode",{parentName:"p"},"p_big_error"),(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"p_big_error")," big error threshold",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"p_velocity_exit_time")," time, in ms, for velocity to be 0",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"p_mA_timeout")," time, in ms, for ",(0,l.kt)("inlineCode",{parentName:"p"},"is_over_current")," to be true       "),(0,l.kt)(r.Z,{groupId:"ex5",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'PID liftPID{1, 0.003, 4, 100, "Lift"};  \nvoid initialize() {\n  liftPID.set_exit_condition(100, 3, 500, 7, 500, 500);\n}\n'))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void set_exit_condition(int p_small_exit_time, double p_small_error, int p_big_exit_time = 0, double p_big_error = 0, int p_velocity_exit_time = 0, int p_mA_timeout = 0);\n")))),(0,l.kt)("h2",{id:"set_name"},"set_name()"),(0,l.kt)("p",null,"A string that prints when exit conditions are met.  When you have multiple mechanisms using exit conditions and you're debugging, seeing which exit condition is doing what can be useful.     "),(0,l.kt)(r.Z,{groupId:"ex6",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'PID liftPID{1, 0.003, 4, 100};\nvoid initialize() {\n  liftPID.set_name("Lift");\n}  \n'))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void set_name(std::string name);\n")))),(0,l.kt)("h2",{id:"compute"},"compute()"),(0,l.kt)("p",null,"Computes PID.  "),(0,l.kt)(r.Z,{groupId:"ex7",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'PID liftPID{1, 0.003, 4, 100, "Lift"};  \npros::Motor lift_motor(1);\nvoid opcontrol() {\n  while (true) {\n    if (master.get_digital(DIGITAL_L1)) {\n      liftPID.set_target(500);\n    }\n    else if (master.get_digital(DIGITAL_L2)) {\n      liftPID.set_target(0);\n    }\n    lift_motor = liftPID.compute(lift_motor.get_position());\n\n    pros::delay(ez::util::DELAY_TIME);\n  }\n}\n'))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"double compute(double current);\n")))),(0,l.kt)("h1",{id:"exit-conditions"},"Exit Conditions"),(0,l.kt)("h2",{id:"no-motor"},"No Motor"),(0,l.kt)("p",null,"Outputs one of the ",(0,l.kt)("inlineCode",{parentName:"p"},"exit_output")," states.  This exit condition checks ",(0,l.kt)("inlineCode",{parentName:"p"},"small_error"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"big_error")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"velocity")," if they are enabled.    "),(0,l.kt)(r.Z,{groupId:"ex8",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'PID liftPID{1, 0.003, 4, 100, "Lift"};  \npros::Motor lift_motor(1);\n\nvoid initialize() {\n  liftPID.set_exit_condition(100, 3, 500, 7, 500, 500);\n}\n\nvoid autonomous() {\n  liftPID.set_target(500);\n  while (liftPID.exit_condition(true) == ez::RUNNING) {\n    lift_motor = liftPID.compute(lift_motor.get_position());\n    pros::delay(ez::util::DELAY_TIME);\n  }\n\n  liftPID.set_target(0);\n  while (liftPID.exit_condition(true) == ez::RUNNING) {\n    lift_motor = liftPID.compute(lift_motor.get_position());\n    pros::delay(ez::util::DELAY_TIME);\n  }\n}\n'))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"ez::exit_output exit_condition(bool print = false);\n")))),(0,l.kt)("h2",{id:"one-motor"},"One Motor"),(0,l.kt)("p",null,"Outputs one of the ",(0,l.kt)("inlineCode",{parentName:"p"},"exit_output")," states.  This exit condition checks ",(0,l.kt)("inlineCode",{parentName:"p"},"small_error"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"big_error"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"velocity")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"mA")," if they are enabled.    "),(0,l.kt)(r.Z,{groupId:"ex9",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'PID liftPID{1, 0.003, 4, 100, "Lift"};  \npros::Motor lift_motor(1);\n\nvoid initialize() {\n  liftPID.set_exit_condition(100, 3, 500, 7, 500, 500);\n}\n\nvoid autonomous() {\n  liftPID.set_target(500);\n  while (liftPID.exit_condition(lift_motor, true) == ez::RUNNING) {\n    lift_motor = liftPID.compute(lift_motor.get_position());\n    pros::delay(ez::util::DELAY_TIME);\n  }\n\n  liftPID.set_target(0);\n  while (liftPID.exit_condition(lift_motor, true) == ez::RUNNING) {\n    lift_motor = liftPID.compute(lift_motor.get_position());\n    pros::delay(ez::util::DELAY_TIME);\n  }\n}\n'))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"ez::exit_output exit_condition(pros::Motor sensor, bool print = false);\n")))),(0,l.kt)("h2",{id:"multiple-motors"},"Multiple Motors"),(0,l.kt)("p",null,"Outputs one of the ",(0,l.kt)("inlineCode",{parentName:"p"},"exit_output")," states.  This exit condition checks ",(0,l.kt)("inlineCode",{parentName:"p"},"small_error"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"big_error"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"velocity")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"mA")," if they are enabled.  When any of the motors trip ",(0,l.kt)("inlineCode",{parentName:"p"},"mA"),", it returns ",(0,l.kt)("inlineCode",{parentName:"p"},"mA_EXIT"),".    "),(0,l.kt)(r.Z,{groupId:"ex10",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'PID liftPID{1, 0.003, 4, 100, "Lift"};  \npros::Motor l_lift_motor(1);\npros::Motor r_lift_motor(2, true);\n\nvoid set_lift(int input) {\n  l_lift_motor = input;\n  r_lift_motor = input;\n}\n\nvoid initialize() {\n  liftPID.set_exit_condition(100, 3, 500, 7, 500, 500);\n}\n\nvoid autonomous() {\n  liftPID.set_target(500);\n  while (liftPID.exit_condition({r_lift_motor, l_lift_motor}, true) == ez::RUNNING) {\n    set_lift(liftPID.compute(lift_motor.get_position()));\n    pros::delay(ez::util::DELAY_TIME);\n  }\n\n  liftPID.set_target(0);\n  while (liftPID.exit_condition({r_lift_motor, l_lift_motor}, true) == ez::RUNNING) {\n    set_lift(liftPID.compute(lift_motor.get_position()));\n    pros::delay(ez::util::DELAY_TIME);\n  }\n}\n'))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"ez::exit_output exit_condition(std::vector<pros::Motor> sensor, bool print = false);\n")))))}_.isMDXComponent=!0}}]);
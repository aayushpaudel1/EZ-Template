"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[175],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return m}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),s=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(a),m=n,v=d["".concat(p,".").concat(m)]||d[m]||c[m]||l;return a?r.createElement(v,o(o({ref:t},u),{},{components:a})):r.createElement(v,o({ref:t},u))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var s=2;s<l;s++)o[s]=a[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5162:function(e,t,a){a.d(t,{Z:function(){return o}});var r=a(7294),n=a(6010),l="tabItem_Ymn6";function o(e){var t=e.children,a=e.hidden,o=e.className;return r.createElement("div",{role:"tabpanel",className:(0,n.Z)(l,o),hidden:a},t)}},5488:function(e,t,a){a.d(t,{Z:function(){return m}});var r=a(7462),n=a(7294),l=a(6010),o=a(2389),i=a(7392),p=a(7094),s=a(2466),u="tabList__CuJ",c="tabItem_LNqP";function d(e){var t,a,o=e.lazy,d=e.block,m=e.defaultValue,v=e.values,_=e.groupId,k=e.className,h=n.Children.map(e.children,(function(e){if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=v?v:h.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),b=(0,i.l)(f,(function(e,t){return e.value===t.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var g=null===m?m:null!=(t=null!=m?m:null==(a=h.find((function(e){return e.props.default})))?void 0:a.props.value)?t:h[0].props.value;if(null!==g&&!f.some((function(e){return e.value===g})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,p.U)(),T=y.tabGroupChoices,N=y.setTabGroupChoices,x=(0,n.useState)(g),I=x[0],E=x[1],w=[],Z=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=_){var C=T[_];null!=C&&C!==I&&f.some((function(e){return e.value===C}))&&E(C)}var L=function(e){var t=e.currentTarget,a=w.indexOf(t),r=f[a].value;r!==I&&(Z(t),E(r),null!=_&&N(_,String(r)))},O=function(e){var t,a=null;switch(e.key){case"ArrowRight":var r,n=w.indexOf(e.currentTarget)+1;a=null!=(r=w[n])?r:w[0];break;case"ArrowLeft":var l,o=w.indexOf(e.currentTarget)-1;a=null!=(l=w[o])?l:w[w.length-1]}null==(t=a)||t.focus()};return n.createElement("div",{className:(0,l.Z)("tabs-container",u)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":d},k)},f.map((function(e){var t=e.value,a=e.label,o=e.attributes;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:I===t?0:-1,"aria-selected":I===t,key:t,ref:function(e){return w.push(e)},onKeyDown:O,onFocus:L,onClick:L},o,{className:(0,l.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":I===t})}),null!=a?a:t)}))),o?(0,n.cloneElement)(h.filter((function(e){return e.props.value===I}))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},h.map((function(e,t){return(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==I})}))))}function m(e){var t=(0,o.Z)();return n.createElement(d,(0,r.Z)({key:String(t)},e))}},3555:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return u},default:function(){return _},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return m}});var r=a(7462),n=a(3366),l=(a(7294),a(3905)),o=a(5488),i=a(5162),p=["components"],s={layout:"default",title:"User Control",parent:"Docs",nav_order:2},u="**User Control**",c={unversionedId:"Docs/user_control",id:"Docs/user_control",title:"User Control",description:"Assumed Constructor",source:"@site/docs/Docs/user_control.md",sourceDirName:"Docs",slug:"/Docs/user_control",permalink:"/EZ-Template/Docs/user_control",draft:!1,tags:[],version:"current",frontMatter:{layout:"default",title:"User Control",parent:"Docs",nav_order:2},sidebar:"tutorialSidebar",previous:{title:"Drive and Telemetry",permalink:"/EZ-Template/Docs/set_and_get_drive"},next:{title:"Util",permalink:"/EZ-Template/Docs/util"}},d={},m=[{value:"Assumed Constructor",id:"assumed-constructor",level:2},{value:"Drivemodes",id:"drivemodes",level:2},{value:"tank()",id:"tank",level:3},{value:"arcade_standard()",id:"arcade_standard",level:3},{value:"arcade_flipped()",id:"arcade_flipped",level:3},{value:"Joystick funcs",id:"joystick-funcs",level:2},{value:"initialize()",id:"initialize",level:3},{value:"init_curve_sd()",id:"init_curve_sd",level:3},{value:"set_curve_defaults()",id:"set_curve_defaults",level:3},{value:"set_active_brake()",id:"set_active_brake",level:3},{value:"toggle_modify_curve_with_controller()",id:"toggle_modify_curve_with_controller",level:3},{value:"set_left_curve_buttons()",id:"set_left_curve_buttons",level:3},{value:"set_right_curve_buttons()",id:"set_right_curve_buttons",level:3},{value:"left_curve_function()",id:"left_curve_function",level:3},{value:"right_curve_function()",id:"right_curve_function",level:3},{value:"set_joystick_threshold()",id:"set_joystick_threshold",level:3},{value:"joy_thresh_opcontrol()",id:"joy_thresh_opcontrol",level:3},{value:"modify_curve_with_controller()",id:"modify_curve_with_controller",level:3}],v={toc:m};function _(e){var t=e.components,a=(0,n.Z)(e,p);return(0,l.kt)("wrapper",(0,r.Z)({},v,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"user-control"},(0,l.kt)("strong",{parentName:"h1"},"User Control")),(0,l.kt)("h2",{id:"assumed-constructor"},"Assumed Constructor"),(0,l.kt)("p",null,"All code below assumes this constructor is used.  As long as the name of the constructor is ",(0,l.kt)("inlineCode",{parentName:"p"},"chassis"),", any of the constructors can be used. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'// Chassis constructor\nDrive chassis (\n  // Left Chassis Ports (negative port will reverse it!)\n  //   the first port is the sensored port (when trackers are not used!)\n  {1, -2, 3}\n\n  // Right Chassis Ports (negative port will reverse it!)\n  //   the first port is the sensored port (when trackers are not used!)\n  ,{-4, 5, -6}\n\n  // IMU Port\n  ,7\n\n  // Wheel Diameter (Remember, 4" wheels are actually 4.125!)\n  //    (or tracking wheel diameter)\n  ,4.125\n\n  // Cartridge RPM\n  //   (or tick per rotation if using tracking wheels)\n  ,600\n\n  // External Gear Ratio (MUST BE DECIMAL)\n  //    (or gear ratio of tracking wheel)\n  // eg. if your drive is 84:36 where the 36t is powered, your RATIO would be 2.333.\n  // eg. if your drive is 36:60 where the 60t is powered, your RATIO would be 0.6.\n  ,2.333\n\n  // Uncomment if using tracking wheels\n  /*\n  // Left Tracking Wheel Ports (negative port will reverse it!)\n  ,{1, 2}\n\n  // Right Tracking Wheel Ports (negative port will reverse it!)\n  ,{3, 4}\n  */\n\n  // Uncomment if tracking wheels are plugged into a 3 wire expander\n  // 3 Wire Port Expander Smart Port\n  // ,9\n);\n\n')),(0,l.kt)("h2",{id:"drivemodes"},"Drivemodes"),(0,l.kt)("h3",{id:"tank"},"tank()"),(0,l.kt)("p",null,"Sets the drive to the left and right y axis.  "),(0,l.kt)(o.Z,{groupId:"ex15",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void opcontrol() {\n  while (true) {\n    chassis.tank();\n    \n    pros::delay(ez::util::DELAY_TIME);\n  }\n}\n"))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void tank();\n")))),(0,l.kt)("h3",{id:"arcade_standard"},"arcade_standard()"),(0,l.kt)("p",null,"Sets the drive to standard arcade.  Left stick is fwd/rev.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"stick_type")," is either ",(0,l.kt)("inlineCode",{parentName:"p"},"EZ::SPLIT")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"EZ::SINGLE"),"."),(0,l.kt)(o.Z,{groupId:"ex1",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void opcontrol() {\n  while (true) {\n    chassis.arcade_standard(EZ::SPIT); // For split arcade\n    // chassis.arcade_standard(EZ::SINGLE); // For single arcade\n    \n    pros::delay(ez::util::DELAY_TIME);\n  }\n}\n"))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void arcade_standard(e_type stick_type);\n")))),(0,l.kt)("h3",{id:"arcade_flipped"},"arcade_flipped()"),(0,l.kt)("p",null,"Sets the drive to flipped arcade.  Right stick is fwd/rev.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"stick_type")," is either ",(0,l.kt)("inlineCode",{parentName:"p"},"EZ::SPLIT")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"EZ::SINGLE"),".  "),(0,l.kt)(o.Z,{groupId:"ex2",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void opcontrol() {\n  while (true) {\n    chassis.arcade_flipped(EZ::SPIT); // For split arcade\n    // chassis.arcade_flipped(EZ::SINGLE); // For single arcade\n    \n    pros::delay(ez::util::DELAY_TIME);\n  }\n}\n"))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void arcade_flipped(e_type stick_type);\n")))),(0,l.kt)("h2",{id:"joystick-funcs"},"Joystick funcs"),(0,l.kt)("h3",{id:"initialize"},"initialize()"),(0,l.kt)("p",null,"Runs ",(0,l.kt)("inlineCode",{parentName:"p"},"init_curve_sd()")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"imu_calibrate()"),".    "),(0,l.kt)(o.Z,{groupId:"ex3",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void initialize() {\n  chassis.initialize();\n}\n"))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void Drive::initialize();\n")))),(0,l.kt)("h3",{id:"init_curve_sd"},"init_curve_sd()"),(0,l.kt)("p",null,"Sets the left/right curve constants to what's on the sd card.  If the sd card is empty, creates needed files.  "),(0,l.kt)(o.Z,{groupId:"ex4",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void initialize() {\n  chassis.init_curve_sd();\n}\n"))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void init_curve_sd();\n")))),(0,l.kt)("h3",{id:"set_curve_defaults"},"set_curve_defaults()"),(0,l.kt)("p",null,"Sets the left/right curve defaults and saves new values to the sd card.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"left")," left input curve.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"right")," right input curve.  "),(0,l.kt)(o.Z,{groupId:"ex5",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void initialize() {\n  chassis.set_curve_defaults(2, 2);\n}\n"))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void set_curve_default(double left, double right);\n")))),(0,l.kt)("h3",{id:"set_active_brake"},"set_active_brake()"),(0,l.kt)("p",null,"Active brake runs a P loop on the drive when joysticks are within their threshold.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"kp")," proportional constant for drive.  "),(0,l.kt)(o.Z,{groupId:"ex6",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void initialize() {\n  chassis.set_active_brake(0.1);\n}\n"))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void set_active_brake(double kp);\n")))),(0,l.kt)("h3",{id:"toggle_modify_curve_with_controller"},"toggle_modify_curve_with_controller()"),(0,l.kt)("p",null,"Enables/disables buttons used for modifying the controller curve with the joystick.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"toggle")," true enables, false disables.  "),(0,l.kt)(o.Z,{groupId:"ex7",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void initialize() {\n  chassis.toggle_modify_curve_with_controller(true);\n}\n"))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void toggle_modify_curve_with_controller(bool toggle);\n")))),(0,l.kt)("h3",{id:"set_left_curve_buttons"},"set_left_curve_buttons()"),(0,l.kt)("p",null,"Sets the buttons that are used to modify the left input curve.  The example is the default.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"decrease")," a pros button.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"increase")," a pros button.  "),(0,l.kt)(o.Z,{groupId:"ex8",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void initialize() {\n  chassis.set_left_curve_buttons (pros::E_CONTROLLER_DIGITAL_LEFT, pros::E_CONTROLLER_DIGITAL_RIGHT);\n}\n"))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void set_left_curve_buttons(pros::controller_digital_e_t decrease, pros::controller_digital_e_t increase);\n")))),(0,l.kt)("h3",{id:"set_right_curve_buttons"},"set_right_curve_buttons()"),(0,l.kt)("p",null,"Sets the buttons that are used to modify the right input curve.  The example is the default.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"decrease")," a pros button.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"increase")," a pros button.  "),(0,l.kt)(o.Z,{groupId:"ex9",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void initialize() {\n  chassis.set_right_curve_buttons(pros::E_CONTROLLER_DIGITAL_Y,    pros::E_CONTROLLER_DIGITAL_A);\n}\n"))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void set_right_curve_buttons(pros::controller_digital_e_t decrease, pros::controller_digital_e_t increase);\n")))),(0,l.kt)("h3",{id:"left_curve_function"},"left_curve_function()"),(0,l.kt)("p",null,"Returns the input times the red curve ",(0,l.kt)("a",{parentName:"p",href:"https://www.desmos.com/calculator/rcfjjg83zx"},"here"),".  ",(0,l.kt)("inlineCode",{parentName:"p"},"tank()"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"arcade_standard()"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"arcade_flipped()")," all handle this for you.  When tank is enabled, only this curve is used.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"x")," input value.  "),(0,l.kt)(o.Z,{groupId:"ex10",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void opcontrol() {\n  while (true) {\n    int l_stick = left_curve_function(master.get_analog(ANALOG_LEFT_Y));\n    int r_stick = left_curve_function(master.get_analog(ANALOG_RIGHT_Y));\n    \n    chassis.set_tank(l_stick, r_stick);\n    \n    pros::delay(ez::util::DELAY_TIME);\n  }\n}\n"))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"double left_curve_function(double x);\n")))),(0,l.kt)("h3",{id:"right_curve_function"},"right_curve_function()"),(0,l.kt)("p",null,"Returns the input times the red curve ",(0,l.kt)("a",{parentName:"p",href:"https://www.desmos.com/calculator/rcfjjg83zx"},"here"),".  ",(0,l.kt)("inlineCode",{parentName:"p"},"tank()"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"arcade_standard()"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"arcade_flipped()")," all handle this for you.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"x")," input value.  "),(0,l.kt)(o.Z,{groupId:"ex11",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void opcontrol() {\n  while (true) {\n    int l_stick = left_curve_function(master.get_analog(ANALOG_LEFT_Y));\n    int r_stick = left_curve_function(master.get_analog(ANALOG_RIGHT_Y));\n    \n    chassis.set_tank(l_stick, r_stick);\n    \n    pros::delay(ez::util::DELAY_TIME);\n  }\n}\n"))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"double right_curve_function(double x);\n")))),(0,l.kt)("h3",{id:"set_joystick_threshold"},"set_joystick_threshold()"),(0,l.kt)("p",null,"Threshold the joystick will return 0 within.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"threshold")," an integer, recommended to be less then 5.  "),(0,l.kt)(o.Z,{groupId:"ex12",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void initialize() {\n  chassis.set_joystick_threshold(5);\n}\n"))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void set_joystick_threshold(int threshold);\n")))),(0,l.kt)("h3",{id:"joy_thresh_opcontrol"},"joy_thresh_opcontrol()"),(0,l.kt)("p",null,"Runs the joystick control.  Sets the left drive to ",(0,l.kt)("inlineCode",{parentName:"p"},"l_stick"),", and right drive to ",(0,l.kt)("inlineCode",{parentName:"p"},"r_stick"),".  Runs active brake and joystick thresholds.    "),(0,l.kt)(o.Z,{groupId:"ex13",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void opcontrol() {\n  while (true) {\n    chassis.joy_thresh_opcontroL(master.get_analog(ANALOG_LEFT_Y), master.get_analog(ANALOG_RIGHT_Y));\n\n    pros::delay(ez::util::DELAY_TIME);\n  }\n  chassis.set_joystick_threshold(5);\n}\n"))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void joy_thresh_opcontrol(int l_stick, int r_stick);\n")))),(0,l.kt)("h3",{id:"modify_curve_with_controller"},"modify_curve_with_controller()"),(0,l.kt)("p",null,"Allows the user to modify the curve with the controller.      "),(0,l.kt)(o.Z,{groupId:"ex14",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void opcontrol() {\n  while (true) {\n    chassis.joy_thresh_opcontroL(master.get_analog(ANALOG_LEFT_Y), master.get_analog(ANALOG_RIGHT_Y));\n\n    chassis.modify_curve_with_controller();\n\n    pros::delay(ez::util::DELAY_TIME);\n  }\n  chassis.set_joystick_threshold(5);\n}\n"))),(0,l.kt)(i.Z,{value:"proto",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void modify_curve_with_controller();\n")))))}_.isMDXComponent=!0}}]);